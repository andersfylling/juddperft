//////////////////////////////////////////////
// movegen.h								//
// Defines:									//
// BitBoard, class Move, 
// class ChessPosition,						//
// Move Generation Functions				//
// Bitboard fill functions					//
// Piece codes and other constants			//
//////////////////////////////////////////////
											
#ifndef _MOVEGEN
#define _MOVEGEN 1
#define _CRT_SECURE_NO_WARNINGS 1

#include <intrin.h>

// Various Build Options:
#define _USE_HASH 1								// if undefined, entire hash table system will be excluded from build
#define _USE_BITSCAN_INSTRUCTIONS 1				// if defined, use x86-64 BSR and BSF instructions (Only available on x86-64)
#define _USE_POPCNT_INSTRUCTION 1				// if defined, use popcnt instruction (Intel: Nehalem or Higher, AMD: Barcelona or Higher)
//define _FLAG_CHECKS_IN_MOVE_GENERATION 1		// Move generator will set "Check" flag in moves which put enemy in check (not needed for perft)
//
#ifndef NULL
#define NULL 0
#endif

#ifndef SMALL_BUFFER_SIZE
#define SMALL_BUFFER_SIZE 64
#endif

#define MOVELIST_SIZE 96

#define CHECKMATE 9999
#define STALEMATE -1

#define WPAWN 1
#define WBISHOP 2
#define WENPASSANT 3
#define WROOK 4
#define WKNIGHT 5
#define WQUEEN 6
#define WKING 7

#define BPAWN 9
#define BBISHOP 10
#define BENPASSANT 11
#define BROOK 12
#define BKNIGHT 13
#define BQUEEN 14
#define BKING 15

// using namespace std;
typedef unsigned __int64 BitBoard;
typedef unsigned __int64 HashKey;


// class Move: This is the Long-Format, in which to From and To squares are represented by Bitboards.
// This is the format that is used throught my full chess engine. The downside is that for recursive functions like perft,
// an array of these uses a lot of stack space, and slows things down. Hence, the more compact version below is used.

class Move
{
public:
	BitBoard From;
	BitBoard To;
	union{
		struct{
				unsigned __int32 BlackToMove : 1;
				unsigned __int32 Check : 1;
				unsigned __int32 Capture : 1;
				unsigned __int32 EnPassantCapture : 1;
				unsigned __int32 DoublePawnMove : 1;
				unsigned __int32 Castle : 1;
				unsigned __int32 CastleLong : 1;
				unsigned __int32 PromoteKnight : 1;
				unsigned __int32 PromoteBishop : 1;
				unsigned __int32 PromoteRook : 1;
				unsigned __int32 PromoteQueen : 1;
				unsigned __int32 Unused : 7;
				unsigned __int32 IllegalMove : 1;
				unsigned __int32 NoMoreMoves : 1;
				unsigned __int32 Piece : 4;	
				unsigned __int32 MoveCount : 8;	
		};
		unsigned 
		__int32 Flags;
	};
	
public:
	Move(BitBoard From=0,BitBoard To=0,unsigned __int32 Flags=0);
	bool operator==(const Move & B) const;
//	Move & operator=(const Move & M);

	Move& Format(
		BitBoard From,
		BitBoard To,
		unsigned __int32 BlackToMove=0,
		unsigned __int32 Piece=0, 
		unsigned __int32 Flags=0
		);
	void ClearFlags() {
		Move::Flags = 0;
	}
};

// ChessMove{} - Compact move format packed into 64 bits
// From and To squares represented by unsigned char square index
// to-do: try to pack it into 32 bits ?

struct ChessMove {
	union {
		struct {
			unsigned __int32 BlackToMove : 1;
			unsigned __int32 Check : 1;
			unsigned __int32 Capture : 1;
			unsigned __int32 EnPassantCapture : 1;
			unsigned __int32 DoublePawnMove : 1;
			unsigned __int32 Castle : 1;
			unsigned __int32 CastleLong : 1;
			unsigned __int32 PromoteKnight : 1;
			unsigned __int32 PromoteBishop : 1;
			unsigned __int32 PromoteRook : 1;
			unsigned __int32 PromoteQueen : 1;
			unsigned __int32 Unused : 7;
			unsigned __int32 IllegalMove : 1;
			unsigned __int32 NoMoreMoves : 1;
			unsigned __int32 Piece : 4;
			unsigned __int32 MoveCount : 8;
		};
		unsigned __int32 Flags;
	};
	unsigned char FromSquare;
	unsigned char ToSquare;
};
class ChessPosition
{
	/* --------------------------------------------------------------

			Explanation of Bit-Representation used in positions:

			D (msb):	Colour (1=Black) 
			C			1=Straight-Moving Piece (Q or R)
			B			1=Diagonal-moving piece (Q or B)
			A (lsb):	1=Pawn

			D	C	B	A

	(0)		0	0	0	0	Empty Square
	(1)		0	0	0	1	White Pawn	
	(2)		0	0	1	0	White Bishop
	(3)		0	0	1	1	White En passant Square
	(4)		0	1	0	0	White Rook
	(5)		0	1	0	1	White Knight
	(6)		0	1	1	0	White Queen
	(7)		0	1	1	1	White King
	(8)		1	0	0	0	Reserved-Don't use (Black empty square)
	(9)		1	0	0	1	Black Pawn	
	(10)	1	0	1	0	Black Bishop
	(11)	1	0	1	1	Black En passant Square
	(12)	1	1	0	0	Black Rook
	(13)	1	1	0	1	Black Knight
	(14)	1	1	1	0	Black Queen
	(15)	1	1	1	1	Black King
		
	---------------------------------------------------------------*/

public:
	BitBoard A;
	BitBoard B;
	BitBoard C;
	BitBoard D;
	union{
		struct{
			unsigned __int32 BlackToMove : 1;
			unsigned __int32 WhiteCanCastle : 1;
			unsigned __int32 WhiteCanCastleLong : 1;
			unsigned __int32 BlackCanCastle : 1;
			unsigned __int32 BlackCanCastleLong : 1;
			unsigned __int32 WhiteForfeitedCastle : 1;
			unsigned __int32 WhiteForfeitedCastleLong : 1;
			unsigned __int32 BlackForfeitedCastle : 1;
			unsigned __int32 BlackForfeitedCastleLong : 1;
			unsigned __int32 WhiteDidCastle : 1;
			unsigned __int32 WhiteDidCastleLong : 1;
			unsigned __int32 BlackDidCastle : 1;
			unsigned __int32 BlackDidCastleLong : 1;
			unsigned __int32 CheckmateWhite;
			unsigned __int32 CheckmateBlack;
		};
		unsigned __int32 Flags;
	};
	unsigned __int16 MoveNumber;
	unsigned __int16 HalfMoves;
	int material;
	bool operator==(const ChessPosition& Q) {
		return((ChessPosition::A == Q.A) && (ChessPosition::B == Q.B) && (ChessPosition::C == Q.C) && (ChessPosition::D == Q.D) && (ChessPosition::Flags == Q.Flags));
	}

#ifdef _USE_HASH
	HashKey HK;
#endif
		
public:
	ChessPosition();
	ChessPosition& SetupStartPosition();
#ifdef _USE_HASH
	ChessPosition& CalculateHash();
#endif
	ChessPosition & SetPieceAtSquare(const unsigned int & piece, BitBoard square);
	unsigned __int32 GetPieceAtSquare(const BitBoard & square) const;
	ChessPosition& CalculateMaterial();
	ChessPosition& PerformMove(ChessMove M);
	void SwitchSides();
	void PrepareChessMove(const ChessMove & M);
	void Clear(void);
	//	ChessPosition& operator=(const ChessPosition& P);
private:
};


/////////////////////////////////////////////
// Move notation styles: 
// ---------------------
// LongAlgebraic: e7xf8(q)
// StandardAlgebraic: exf(q)
// CoOrdinate: e7f8q
/////////////////////////////////////////////

enum MoveNotationStyle{
	LongAlgebraic,
	StandardAlgebraic,
	CoOrdinate,
	Diagnostic,
	LongAlgebraicNoNewline
};

// Move-Generation (and verification)
void GenerateMoves(const ChessPosition & P, ChessMove * pM);
bool IsInCheck(const ChessPosition& P, bool bIsBlack);

// White Move-Generation Functions:
void GenWhiteMoves(const ChessPosition& P, ChessMove*);
extern inline BitBoard GenBlackAttacks(const ChessPosition& Z);
BitBoard IsWhiteInCheck(const ChessPosition & Z);
void AddWhiteMoveToListIfLegal2(const ChessPosition & P, ChessMove *& pM, unsigned char fromsquare, BitBoard to, __int32 piece, __int32 flags=0);

// Black Move-Generation Functions:
void GenBlackMoves(const ChessPosition& P, ChessMove*);
extern inline BitBoard GenWhiteAttacks(const ChessPosition& Z);
BitBoard IsBlackInCheck(const ChessPosition & Z);
void AddBlackMoveToListIfLegal2(const ChessPosition & P, ChessMove *& pM, unsigned char fromsquare, BitBoard to, __int32 piece, __int32 flags=0);

// Dump I/O functions:
void DumpBitBoard(BitBoard b);
void DumpChessPosition(ChessPosition p);
void DumpMove(ChessMove M, MoveNotationStyle style = LongAlgebraic, char* pBuffer = NULL);
void DumpMoveList(ChessMove * pMoveList, MoveNotationStyle style=LongAlgebraic, char * pBuffer=NULL);

// Compound Bitboard Fill operations:
BitBoard FillStraightAttacksOccluded(BitBoard g, BitBoard p);
BitBoard FillDiagonalAttacksOccluded(BitBoard g, BitBoard p);
BitBoard FillKingAttacksOccluded(BitBoard g, BitBoard p);
BitBoard FillKingAttacks(BitBoard g);
BitBoard FillKnightAttacksOccluded(BitBoard g, BitBoard p);

// Fill and Move Bitboard Operations:
BitBoard FillRightOccluded(BitBoard g, BitBoard p);
BitBoard FillLeftOccluded(BitBoard g, BitBoard p);
BitBoard FillUpOccluded(BitBoard g, BitBoard p);
BitBoard FillDownOccluded(BitBoard g, BitBoard p);

BitBoard FillUpRightOccluded(BitBoard g, BitBoard p);
BitBoard FillDownRightOccluded(BitBoard g, BitBoard p);
BitBoard FillDownLeftOccluded(BitBoard g, BitBoard p);
BitBoard FillUpLeftOccluded(BitBoard g, BitBoard p);

BitBoard MoveUpSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveUpRightSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveRightSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveDownRightSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveDownSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveDownLeftSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveLeftSingleOccluded(BitBoard g, BitBoard p);
BitBoard MoveUpLeftSingleOccluded(BitBoard g, BitBoard p);

BitBoard MoveKnight1Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight2Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight3Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight4Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight5Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight6Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight7Occluded(BitBoard g, BitBoard p);
BitBoard MoveKnight8Occluded(BitBoard g, BitBoard p);

/* --------------------------------------------------------------
Deafault material values of Pieces:
---------------------------------------------------------------*/

const int PieceMaterialValue[16] =
{	
	0,			// Empty Square
	100,		// White pawn
	300,		// White Bishop
	0,			// White En passant Square
	500,		// White Rook
	300,		// White Knight
	900,		// White Queen
	0,			// White King
	0,			// Unused	
	-100,		// Black Pawn
	-300,		// Black Bishop
	0,			// Black En passant Square
	-500,		// Black Rook
	-300,		// Black Knight
	-900		// Black Queen
	,0			// Black King
};

// Various Bitboard configurations:
#define RANK1 0x00000000000000ffi64
#define RANK2 0x000000000000ff00i64
#define RANK3 0x0000000000ff0000i64
#define RANK4 0x00000000ff000000i64
#define RANK5 0x000000ff00000000i64
#define RANK6 0x0000ff0000000000i64
#define RANK7 0x00ff000000000000i64
#define RANK8 0xff00000000000000i64

#define FILEA 0x8080808080808080i64
#define FILEB 0x4040404040404040i64
#define FILEC 0x2020202020202020i64
#define FILED 0x1010101010101010i64
#define FILEE 0x0808080808080808i64
#define FILEF 0x0404040404040404i64
#define FILEG 0x0202020202020202i64
#define FILEH 0x0101010101010101i64

#define A1 0x0000000000000080i64
#define B1 0x0000000000000040i64
#define C1 0x0000000000000020i64
#define D1 0x0000000000000010i64
#define E1 0x0000000000000008i64
#define F1 0x0000000000000004i64
#define G1 0x0000000000000002i64
#define H1 0x0000000000000001i64
#define D4 0x0000000010000000i64
#define E4 0x0000000008000000i64
#define D5 0x0000000100000000i64
#define E5 0x0000000080000000i64
#define A8 0x8000000000000000i64
#define B8 0x4000000000000000i64
#define C8 0x2000000000000000i64
#define D8 0x1000000000000000i64
#define E8 0x0800000000000000i64
#define F8 0x0400000000000000i64
#define G8 0x0200000000000000i64
#define H8 0x0100000000000000i64


#define RIM	0xff818181818181ffi64
#define UPPER_CENTRE 0x0000001800000000i64
#define LOWER_CENTRE 0x0000000018000000i64

#define	WHITECASTLEZONE		0x0000000000000006i64
#define	BLACKCASTLEZONE		0x0600000000000000i64
#define	WHITECASTLELONGZONE	0x0000000000000070i64
#define	BLACKCASTLELONGZONE	0x7000000000000000i64
#define WHITEOUTPOSTZONE 0x0000ffffff000000i64
#define BLACKOUTPOSTZONE 0x000000ffffff0000i64

#define WHITEQRPOS 0x0000000000000080i64
#define WHITEQNPOS 0x0000000000000040i64
#define WHITEQBPOS 0x0000000000000020i64
#define WHITEQUEENPOS  0x0000000000000010i64
#define WHITEKINGPOS 0x0000000000000008i64
#define WHITEKBPOS 0x0000000000000004i64
#define WHITEKNPOS 0x0000000000000002i64
#define WHITEKRPOS 0x0000000000000001i64

#define BLACKQRPOS 0x8000000000000000i64
#define BLACKQNPOS 0x4000000000000000i64
#define BLACKQBPOS 0x2000000000000000i64
#define BLACKQUEENPOS 0x1000000000000000i64
#define BLACKKINGPOS 0x0800000000000000i64
#define BLACKKBPOS 0x0400000000000000i64
#define BLACKKNPOS 0x0200000000000000i64
#define BLACKKRPOS 0x0100000000000000i64

const BitBoard LEFTMASK =0xfefefefefefefefei64;
const BitBoard RIGHTMASK=0x7f7f7f7f7f7f7f7fi64;

// Pre-calculated move tables:

const BitBoard MoveUp[64] = {
	0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x00000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x00000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x00000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x00001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x00100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
	0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x10000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveUpRight[64] = {
	000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
	000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
	000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
	000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
	000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
	000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
	000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveRight[64] = {
	000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
	000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
	000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
	000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
	000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
	000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
	000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000
};

const BitBoard MoveDownRight[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
	000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
	000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
	000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
	000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
	000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000
};

const BitBoard MoveDown[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x00000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x00000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x00000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x00000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x00001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x00100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
	0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x10000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000
};

const BitBoard MoveDownLeft[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
	0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
	0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
	0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
	0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
	0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
	0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000
};

const BitBoard MoveLeft[64] = {
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
	0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
	0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
	0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
	0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
	0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
	0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000
};

const BitBoard MoveUpLeft[64] = {
	0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
	0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
	0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
	0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
	0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
	0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveKnight1[64] = {
	000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
	000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
	000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
	000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
	000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
	000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveKnight2[64] = {
	000000000000000000, 000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x00000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000,
	000000000000000000, 000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x00000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000,
	000000000000000000, 000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x00000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000,
	000000000000000000, 000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x00000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000,
	000000000000000000, 000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x00040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000,
	000000000000000000, 000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x04000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000,
	000000000000000000, 000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveKnight3[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x00000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020,
	000000000000000000, 000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x00000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000,
	000000000000000000, 000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x00000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000,
	000000000000000000, 000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x00000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000,
	000000000000000000, 000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x00000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000,
	000000000000000000, 000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x00040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000,
	000000000000000000, 000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x04000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000
};

const BitBoard MoveKnight4[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
	000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
	000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
	000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
	000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000
};

const BitBoard MoveKnight5[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
	0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
	0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
	0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
	0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
	0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000
};

const BitBoard MoveKnight6[64] = {
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x00000000000040, 0x0000000000000080, 000000000000000000, 000000000000000000,
	0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x00000000004000, 0x0000000000008000, 000000000000000000, 000000000000000000,
	0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x00000000400000, 0x0000000000800000, 000000000000000000, 000000000000000000,
	0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x00000040000000, 0x0000000080000000, 000000000000000000, 000000000000000000,
	0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x00004000000000, 0x0000008000000000, 000000000000000000, 000000000000000000,
	0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x00400000000000, 0x0000800000000000, 000000000000000000, 000000000000000000,
	0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x40000000000000, 0x0080000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveKnight7[64] = {
	0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x00000000004000, 0x0000000000008000, 000000000000000000, 000000000000000000,
	0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x00000000400000, 0x0000000000800000, 000000000000000000, 000000000000000000,
	0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x00000040000000, 0x0000000080000000, 000000000000000000, 000000000000000000,
	0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x00004000000000, 0x0000008000000000, 000000000000000000, 000000000000000000,
	0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x00400000000000, 0x0000800000000000, 000000000000000000, 000000000000000000,
	0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x40000000000000, 0x0080000000000000, 000000000000000000, 000000000000000000,
	0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

const BitBoard MoveKnight8[64] = {
	0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
	0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
	0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
	0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
	0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
	000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

// Timer macros:

#define START_TIMER() LARGE_INTEGER starttime,finishtime,elapsed,frequency,timetaken; \
	QueryPerformanceFrequency(&frequency); \
	QueryPerformanceCounter(&starttime)
#define STOP_TIMER() QueryPerformanceCounter(&finishtime); \
	elapsed.QuadPart=finishtime.QuadPart-starttime.QuadPart; \
	timetaken.QuadPart=((1000*elapsed.QuadPart)/frequency.QuadPart); \
	printf_s("Time = %d ms\n",(long)timetaken.QuadPart)

// Note : Inline Functions to follow
inline unsigned long GetSquareIndex(BitBoard b);

//////// Fill Functions ////////////////////

////////////////////////////////////////////
// Fill in straight attacks               //
// Note: Fill excludes attacking piece(s) //
////////////////////////////////////////////

inline BitBoard FillStraightAttacksOccluded(BitBoard g, BitBoard p)
{
	// Original Function looked like this:

	//BitBoard a;
	//a =FillRightOccluded(g,p);
	//a |= FillLeftOccluded(g,p);
	//a |= FillUpOccluded(g,p);
	//a |= FillDownOccluded(g,p);
	//a &= ~g; // exclude attacking pieces 
	//return a; 


	// But, it will optimize much better if we break it up
	// into a series of single instuctions, and let the compiler
	// play around with the instruction scheduling 
	// (assuming its a good compiler): 

	BitBoard a, b, c, d, e, f, i, j;
	BitBoard s, t, u, v, w, x, y, z;
	BitBoard r;
	const BitBoard m1 = 0xfefefefefefefefe;
	const BitBoard m2 = 0x7f7f7f7f7f7f7f7f;
	// up
	a = g; b = p; s = a; s <<= 8; s &= b; a |= s; t = b; t <<= 8; b &= t; s = a; s <<= 16; s &= b;
	a |= s; t = b; t <<= 16; b &= t; s = a; s <<= 32; s &= b; a |= s; r = a;
	// down:
	c = g; d = p; u = c; u >>= 8; u &= d; c |= u; v = d; v >>= 8; d &= v; u = c; u >>= 16; u &= d;
	c |= u; v = d; v >>= 16; d &= v; u = c; u >>= 32; u &= d; c |= u; r |= c;
	// Left:
	e = g; f = p; f &= m1; w = e; w <<= 1; w &= f; e |= w; x = f; x <<= 1; f &= x; w = e; w <<= 2; w &= f;
	e |= w; x = f; x <<= 2; f &= x; w = e; w <<= 4; w &= f; e |= w; r |= e;
	// Right:
	i = g; j = p; j &= m2; y = i; y >>= 1; y &= j; i |= y; z = j; z >>= 1; j &= z; y = i; y >>= 2; y &= j;
	i |= y; z = j; z >>= 2; j &= z; y = i; y >>= 4; y &= j; i |= y; r |= i;
	r&=~g;
	return r;
}

////////////////////////////////////////////
// Fill in diagonal attacks               //
// Note: Fill excludes attacking piece(s) //
////////////////////////////////////////////
inline BitBoard FillDiagonalAttacksOccluded(BitBoard g, BitBoard p)
{

/*	BitBoard a;
	a =  FillUpRightOccluded(g,p);
	a |= FillDownRightOccluded(g,p);
	a |= FillDownLeftOccluded(g,p);
	a |= FillUpLeftOccluded(g,p);
	a &= ~g; // exclude attacking pieces
	return a;
*/

	BitBoard a, b, c, d, e, f, i, j;
	BitBoard s, t, u, v, w, x, y, z;
	const BitBoard m1 = 0xfefefefefefefefe;
	const BitBoard m2 = 0x7f7f7f7f7f7f7f7f;
	BitBoard r;
	// UpRight
	a = g; b = p; b &= m2; s = a; s <<= 7; s &= b; a |= s; t = b; t <<= 7; b &= t; s = a; s <<= 14; s &= b;
	a |= s; t = b; t <<= 14; b &= t; s = a; s <<= 28; s &= b; a |= s; r = a;
	// downRight:
	c = g; d = p; d &= m2; u = c; u >>= 9; u &= d; c |= u; v = d; v >>= 9; d &= v; u = c; u >>= 18; u &= d;
	c |= u; v = d; v >>= 18; d &= v; u = c; u >>= 36; u &= d; c |= u; r |= c;
	// DownLeft:
	e = g; f = p; f &= m1; w = e; w >>= 7; w &= f; e |= w; x = f; x >>= 7; f &= x; w = e; w >>= 14; w &= f;
	e |= w; x = f; x >>= 14; f &= x; w = e; w >>= 28; w &= f; e |= w; r |= e;
	// UpLeft:
	i = g; j = p; j &= m1; y = i; y <<= 9; y &= j; i |= y; z = j; z <<= 9; j &= z; y = i; y <<= 18; y &= j;
	i |= y; z = j; z <<= 18; j &= z; y = i; y <<= 36; y &= j; i |= y; r |= i;
	//
	r &= ~g;
	return r;
}

////////////////////////////////////////////
// Fill in king attacks                   //
// Note: Fill excludes attacking piece(s) //
////////////////////////////////////////////
inline BitBoard FillKingAttacksOccluded(BitBoard g, BitBoard p)
{
#ifdef V1
	BitBoard a;
	a =  MoveUpSingleOccluded(g,p);
	a |= MoveUpRightSingleOccluded(g,p);
	a |= MoveRightSingleOccluded(g,p);
	a |= MoveDownRightSingleOccluded(g,p);

	a |= MoveDownSingleOccluded(g,p);
	a |= MoveDownLeftSingleOccluded(g,p);
	a |= MoveLeftSingleOccluded(g,p);
	a |= MoveUpLeftSingleOccluded(g,p);
	//a &= ~g; // exclude attacking pieces
	return a; 
#else
	
	// More efficient.
	//const BitBoard m1=0xfefefefefefefefei64;
	//const BitBoard m2=0x7f7f7f7f7f7f7f7fi64;
/*	BitBoard a;
	a = g | (0xfefefefefefefefei64 & (g << 1));
	a |= a << 8;
	a |= 0x7f7f7f7f7f7f7f7fi64 & (a >> 1);
	a |= a >> 8;
	a &=~g;
	a &=p;
	return a; */
	// 
	BitBoard a, b;
	BitBoard t, u;
	a = g; t = g; t <<= 1; t &= 0xfefefefefefefefei64; a |= t;
	b = a; b <<= 8; a |= b; u = a; u >>= 1; u &= 0x7f7f7f7f7f7f7f7fi64; a |= u;
	b = a; b >>= 8; a |= b; a &= ~g; a &= p;
	return a;
#endif
}

inline BitBoard FillKingAttacks(BitBoard g)
{
	BitBoard a, b;
	BitBoard t, u;
	a = g; t = g; t <<= 1; t &= 0xfefefefefefefefei64; a |= t;
	b = a; b <<= 8; a |= b; u = a; u >>= 1; u &= 0x7f7f7f7f7f7f7f7fi64; a |= u;
	b = a; b >>= 8; a |= b; a &= ~g;
	return a;
}

////////////////////////////////////////////
// Fill in knight attacks                 //
// Note: Fill excludes attacking piece(s) //
////////////////////////////////////////////
inline BitBoard FillKnightAttacksOccluded(BitBoard g, BitBoard p)
{
	/*
	BitBoard a;
	a =  MoveKnight1Occluded(g,p);
	a |= MoveKnight2Occluded(g,p);
	a |= MoveKnight3Occluded(g,p);
	a |= MoveKnight4Occluded(g,p);

	a |= MoveKnight5Occluded(g,p);
	a |= MoveKnight6Occluded(g,p);
	a |= MoveKnight7Occluded(g,p);
	a |= MoveKnight8Occluded(g,p);
	//a &= ~g; // exclude attacking pieces
	return a; 
	*/
		
	BitBoard l1 = (g >> 1) & 0x7f7f7f7f7f7f7f7f;
	BitBoard l2 = (g >> 2) & 0x3f3f3f3f3f3f3f3f;
	BitBoard r1 = (g << 1) & 0xfefefefefefefefe;
	BitBoard r2 = (g << 2) & 0xfcfcfcfcfcfcfcfc;
	BitBoard h1 = l1 | r1;
	BitBoard h2 = l2 | r2;
	return p &((h1 << 16) | (h1 >> 16) | (h2 << 8) | (h2 >> 8));
	
}

inline BitBoard FillKnightAttacks(BitBoard g)
{
	BitBoard l1 = (g >> 1) & 0x7f7f7f7f7f7f7f7f;
	BitBoard l2 = (g >> 2) & 0x3f3f3f3f3f3f3f3f;
	BitBoard r1 = (g << 1) & 0xfefefefefefefefe;
	BitBoard r2 = (g << 2) & 0xfcfcfcfcfcfcfcfc;
	BitBoard h1 = l1 | r1;
	BitBoard h2 = l2 | r2;
	return (h1 << 16) | (h1 >> 16) | (h2 << 8) | (h2 >> 8);
}

inline BitBoard FillUpOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
    g |= p & (g <<  8);
    p &=     (p <<  8);
    g |= p & (g << 16);
    p &=     (p << 16);
	g |= p & (g << 32);
	return g;
}

inline BitBoard FillDownOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
    g |= p & (g >>  8);
    p &=     (p >>  8);
    g |= p & (g >> 16);
    p &=     (p >> 16);
	g |= p & (g >> 32);
	return g;
}

inline BitBoard FillLeftOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
    p &= 0xfefefefefefefefe;
    g |= p & (g << 1);
    p &=     (p << 1);
    g |= p & (g << 2);
    p &=     (p << 2);
	g |= p & (g << 4);
	return g;
}

inline BitBoard FillRightOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
    p &= 0x7f7f7f7f7f7f7f7f;
    g |= p & (g >> 1);
    p &=     (p >> 1);
    g |= p & (g >> 2);
    p &=     (p >> 2);
	g |= p & (g >> 4);
	return g;
}

inline BitBoard FillUpRightOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
	p &= 0x7f7f7f7f7f7f7f7fi64; // left wall
    g |= p & (g <<  7);
    p &=     (p <<  7);
    g |= p & (g << 14);
    p &=     (p << 14);
	g |= p & (g << 28);
	return g;
}

inline BitBoard FillDownRightOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
	p &= 0x7f7f7f7f7f7f7f7fi64; // left wall
    g |= p & (g >>  9);
    p &=     (p >>  9);
    g |= p & (g >> 18);
    p &=     (p >> 18); 
	g |= p & (g >> 36);
	return g;
}


inline BitBoard FillDownLeftOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
	p &= 0xfefefefefefefefe; // right wall
	g |= p & (g >> 7);
	p &=     (p >> 7);
	g |= p & (g >> 14);
	p &=     (p >> 14);
	g |= p & (g >> 28);
	return g;
}

inline BitBoard FillUpLeftOccluded(BitBoard g, BitBoard p)
{
	// Note: Fill includes pieces.
	p &= 0xfefefefefefefefe; // right wall
	g |= p & (g << 9);
	p &=     (p << 9);
	g |= p & (g << 18);
	p &=     (p << 18);
	g |= p & (g << 36);
	return g;
}

inline BitBoard MoveUpSingleOccluded(BitBoard g, BitBoard p)
{
	return (p & (g << 8));
}

inline BitBoard MoveUpRightSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0x7f7f7f7f7f7f7f7fi64;
	return (p & (g << 7));
}

inline BitBoard MoveRightSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0x7f7f7f7f7f7f7f7fi64;
	return (p & (g >> 1));
}

inline BitBoard MoveDownRightSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0x7f7f7f7f7f7f7f7fi64;
	return (p & (g >> 9));
}

inline BitBoard MoveDownSingleOccluded(BitBoard g, BitBoard p)
{
	return (p & (g >> 8));
}

inline BitBoard MoveDownLeftSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0xfefefefefefefefe;
	return (p & (g >> 7));
}

inline BitBoard MoveLeftSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0xfefefefefefefefe;
	return (p & (g << 1));
}

inline BitBoard MoveUpLeftSingleOccluded(BitBoard g, BitBoard p)
{
	p &= 0xfefefefefefefefe;
	return (p & (g << 9));
}

inline BitBoard MoveDownLeftRightSingle(BitBoard g)
{	
	return	(0xfefefefefefefefei64 & (g >> 7)) |	// DownLeft
			(0x7f7f7f7f7f7f7f7fi64 & (g >> 9));		// DownRight
}

inline BitBoard MoveUpLeftRightSingle(BitBoard g) {
	return	(0xfefefefefefefefei64 & (g << 9)) |	// UpLeft
			(0x7f7f7f7f7f7f7f7fi64 & (g << 7));		// UpRight
}

inline BitBoard MoveKnight1Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x8080808080808000;
	return (p & (g << 15));
}

inline BitBoard MoveKnight2Occluded(BitBoard g, BitBoard p)
{
	p &= ~0xC0C0C0C0C0C0C0C0;
	return (p & (g << 6));
}

inline BitBoard MoveKnight3Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0000C0C0C0C0C0C0;
	return (p & (g >> 10));
}

inline BitBoard MoveKnight4Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0000008080808080;
	return (p & (g >> 17));
}

inline BitBoard MoveKnight5Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0001010101010101;
	return (p & (g >> 15));
}

inline BitBoard MoveKnight6Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0303030303030303;
	return (p & (g >> 6));
}

inline BitBoard MoveKnight7Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0303030303030000;
	return (p & (g << 10));
}

inline BitBoard MoveKnight8Occluded(BitBoard g, BitBoard p)
{
	p &= ~0x0101010101000000;
	return (p & (g << 17));
}

inline int PopCount(const BitBoard & B)
{
#ifdef _USE_POPCNT_INSTRUCTION
	return static_cast<int>(__popcnt64(B));
#else
	// This routine comes from: 
	// Knuth, TAoCP Vol 4: Fascicle 1, (no. 62)
	BitBoard A;
	A = B - ((B >> 1) & 0x5555555555555555i64);
	A = (A & 0x3333333333333333i64) +
		((A >> 2) & 0x3333333333333333i64);
	A = (A + (A >> 4)) & 0x0f0f0f0f0f0f0f0fi64;
	return static_cast<int>((A * 0x0101010101010101i64) >> 56);
#endif
}

inline unsigned long GetSquareIndex(BitBoard b)
{
	unsigned long n = 0;

#if defined(_USE_BITSCAN_INSTRUCTIONS) && defined(_WIN64)
	// Get index of Square:
	_BitScanForward64(&n, b);
#else 

	// alternative method for non-x86-64, using DeBruijn Multiplication:
	// see (https://chessprogramming.wikispaces.com/BitScan)

	const BitBoard db64 = 0x02dd7ecd2a2721e3i64; // 28916999.

	const unsigned int tbl[64] =
	{
		0,  1,  2, 51, 39,  3, 59, 52,
		48, 40, 32,  4, 60, 26, 43, 53,
		49, 37, 30, 41, 35, 33,  5, 14,
		61, 23, 27,  7, 44, 10, 54, 16,
		63, 50, 38, 58, 47, 31, 25, 42,
		36, 29, 34, 13, 22,  6,  9, 15,
		62, 57, 46, 24, 28, 12, 21,  8,
		56, 45, 11, 20, 55, 19, 18, 17,
	};

	// BitScanForward:
	n = tbl[((b&-b)*db64) >> 58];
#endif
	return n;
}

// GetFirstAndLastPiece()
// Note: starts from Bottom Right (H1 / bit 0), ends Top-Left (A8 / bit 63)
inline void GetFirstAndLastPiece(const BitBoard& B, BitBoard& First, BitBoard& Last)
{	
	unsigned long a = 63;
	unsigned long b = 0;

#if defined(_USE_BITSCAN_INSTRUCTIONS) && defined(_WIN64) 
	// perform Bitscans to determine start and finish squares;
	// Important: a and b must be initialised first !
	_BitScanReverse64(&a, B);
	_BitScanForward64(&b, B);
#else
	
	// alternative method for non-x86-64, using DeBruijn Multiplication:
	// To-do: Fix Bitscan reverse (last) - it's still broken.
	// see (https://chessprogramming.wikispaces.com/BitScan)

	const BitBoard db64 = 0x02dd7ecd2a2721e3i64; // 28916999.

	const unsigned int tbl[64] =
	{
		0,  1,  2, 51, 39,  3, 59, 52,
		48, 40, 32,  4, 60, 26, 43, 53,
		49, 37, 30, 41, 35, 33,  5, 14,
		61, 23, 27,  7, 44, 10, 54, 16,
		63, 50, 38, 58, 47, 31, 25, 42,
		36, 29, 34, 13, 22,  6,  9, 15,
		62, 57, 46, 24, 28, 12, 21,  8,
		56, 45, 11, 20, 55, 19, 18, 17,
	};
	
	// BitScanForward:
	b = tbl[((B&-B)*db64) >> 58];
	
	// BitScanReverse:
	BitBoard A = B;
	A |= A >> 1;
	A |= A >> 2;
	A |= A >> 4;
	A |= A >> 8;
	A |= A >> 16;
	A |= A >> 32;
	a= tbl[(A * db64) >> 58];
	//	Last =/* B &*/ (1i64 << a); // 13/02/2016: Broken !!
	a = 63;// Broken: Default to last square (63) to-do: FIX !!!

#endif

	Last = B & (1i64 << a); 
	First = B & (1i64 << b);
}

// Conversion functions for the different Move formats:
inline void Move2ChessMove(ChessMove& m, const Move& M) {
	m.Flags = M.Flags;
	m.FromSquare =	static_cast<unsigned char>(GetSquareIndex(M.From));
	m.ToSquare =	static_cast<unsigned char>(GetSquareIndex(M.To));
}

inline void ChessMove2Move(const ChessMove& m, Move& M) {
	M.Flags = m.Flags;
	M.From = 1i64 << m.FromSquare;
	M.To = 1i64 << m.ToSquare;
}

#endif // _MOVEGEN